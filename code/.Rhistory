geom_line()+
geom_vline(xintercept = post_max_100,color = 'red', linetype = 'dashed')
n = 10
p = seq(0,0.1, 0.0001)
norm = integration(n, tol)
post_10 = posterior(n, p)/norm
post_max_10 = posterior_max(n)
#Calculate posterior probability
#Uniform prior by default
posterior = function(n, p, alpha = 1, beta = 1, k = 0.2){
return(p^(k + alpha - 1)*(1-p)^(n - k + beta - 1))
}
posterior_max = function(n, k = 0.2, alpha = 1, beta = 1){
return((k+alpha-1)/(alpha+beta+n-2))
}
integration = function(n, tol){
post = posterior(n, p)
int = cumsum(post)
dif = diff(int)
lim = length(dif[dif > tol])
return(sum(post[0:lim]))
}
n = 100
p = seq(0,0.06, 0.0001)
tol = 1e-6
norm = integration(n, tol)
post_100 = posterior(n, p)/norm
post_max_100 = posterior_max(n)
#Plot
library(ggplot2)
df = data.frame('p' = p, 'posterior' = post_100)
ggplot(data = df, aes(x = p, y = posterior))+
geom_line()+
geom_vline(xintercept = post_max_100,color = 'red', linetype = 'dashed')
n = 10
p = seq(0,0.1, 0.0001)
norm = integration(n, tol)
post_10 = posterior(n, p)/norm
post_max_10 = posterior_max(n)
sum(post_100)
#Calculate posterior probability
#Uniform prior by default
posterior = function(n, p, alpha = 1, beta = 1, k = 0.2){
return(p^(k + alpha - 1)*(1-p)^(n - k + beta - 1))
}
posterior_max = function(n, k = 0.2, alpha = 1, beta = 1){
return((k+alpha-1)/(alpha+beta+n-2))
}
integration = function(n, tol){
post = posterior(n, p)
int = cumsum(post)
dif = diff(int)
lim = length(dif[dif > tol])
return(sum(post[0:lim]))
}
n = 100
p = seq(0,0.06, 0.0001)
tol = 1e-6
norm = integration(n, tol)
post_100 = posterior(n, p)/norm
post_max_100 = posterior_max(n)
#Plot
library(ggplot2)
df = data.frame('p' = p, 'posterior' = post_100)
p_100 = ggplot(data = df, aes(x = p, y = posterior))+
geom_line()+
geom_vline(xintercept = post_max_100,color = 'red', linetype = 'dashed')
n = 10
p = seq(0,0.1, 0.0001)
norm = integration(n, tol)
post_10 = posterior(n, p)/norm
post_max_10 = posterior_max(n)
#plot
df = data.frame('p' = p, 'posterior' = post_10)
p_10 = ggplot(data = df, aes(x = p, y = posterior))+
geom_line()+
geom_vline(xintercept = post_max_10,color = 'red', linetype = 'dashed')
#Calculate posterior probability
#Uniform prior by default
posterior = function(n, p, alpha = 1, beta = 1, k = 0.2){
return(p^(k + alpha - 1)*(1-p)^(n - k + beta - 1))
}
posterior_max = function(n, k = 0.2, alpha = 1, beta = 1){
return((k+alpha-1)/(alpha+beta+n-2))
}
integration = function(n, tol){
post = posterior(n, p)
int = cumsum(post)
dif = diff(int)
lim = length(dif[dif > tol])
return(sum(post[0:lim]))
}
n = 100
p = seq(0,0.06, 0.0001)
tol = 1e-6
norm = integration(n, tol)
post_100 = posterior(n, p)/norm
post_max_100 = posterior_max(n)
#Plot
library(ggplot2)
df = data.frame('p' = p, 'posterior' = post_100)
p_100 = ggplot(data = df, aes(x = p, y = posterior))+
geom_line()+
geom_vline(xintercept = post_max_100,color = 'red', linetype = 'dashed')
n = 10
p = seq(0,0.1, 0.0001)
norm = integration(n, tol)
post_10 = posterior(n, p)/norm
post_max_10 = posterior_max(n)
#plot
df = data.frame('p' = p, 'posterior' = post_10)
p_10 = ggplot(data = df, aes(x = p, y = posterior))+
geom_line()+
geom_vline(xintercept = post_max_10,color = 'red', linetype = 'dashed')
print(p_10)
#Calculate posterior probability
#Uniform prior by default
posterior = function(n, p, alpha = 1, beta = 1, k = 0.2){
return(p^(k + alpha - 1)*(1-p)^(n - k + beta - 1))
}
posterior_max = function(n, k = 0.2, alpha = 1, beta = 1){
return((k+alpha-1)/(alpha+beta+n-2))
}
integration = function(n, tol){
post = posterior(n, p)
int = cumsum(post)
dif = diff(int)
lim = length(dif[dif > tol])
return(sum(post[0:lim]))
}
n = 100
p = seq(0,0.06, 0.0001)
tol = 1e-6
norm = integration(n, tol)
post_100 = posterior(n, p)/norm
post_max_100 = posterior_max(n)
#Plot
library(ggplot2)
df = data.frame('p' = p, 'posterior' = post_100)
p_100 = ggplot(data = df, aes(x = p, y = posterior))+
geom_line()+
geom_vline(xintercept = post_max_100,color = 'red', linetype = 'dashed')
n = 10
p = seq(0,0.5, 0.0001)
norm = integration(n, tol)
post_10 = posterior(n, p)/norm
post_max_10 = posterior_max(n)
#plot
df = data.frame('p' = p, 'posterior' = post_10)
p_10 = ggplot(data = df, aes(x = p, y = posterior))+
geom_line()+
geom_vline(xintercept = post_max_10,color = 'red', linetype = 'dashed')
print(p_10)
#Calculate posterior probability
#Uniform prior by default
posterior = function(n, p, alpha = 1, beta = 1, k = 0.2){
return(p^(k + alpha - 1)*(1-p)^(n - k + beta - 1))
}
posterior_max = function(n, k = 0.2, alpha = 1, beta = 1){
return((k+alpha-1)/(alpha+beta+n-2))
}
integration = function(n, tol){
post = posterior(n, p)
int = cumsum(post)
dif = diff(int)
lim = length(dif[dif > tol])
return(sum(post[0:lim]))
}
n = 100
p = seq(0,0.06, 0.0001)
tol = 1e-6
norm = integration(n, tol)
post_100 = posterior(n, p)/norm
post_max_100 = posterior_max(n)
#Plot
library(ggplot2)
df = data.frame('p' = p, 'posterior' = post_100)
p_100 = ggplot(data = df, aes(x = p, y = posterior))+
geom_line()+
geom_vline(xintercept = post_max_100,color = 'red', linetype = 'dashed')
n = 10
p = seq(0,0.45, 0.0001)
norm = integration(n, tol)
post_10 = posterior(n, p)/norm
post_max_10 = posterior_max(n)
#plot
df = data.frame('p' = p, 'posterior' = post_10)
p_10 = ggplot(data = df, aes(x = p, y = posterior))+
geom_line()+
geom_vline(xintercept = post_max_10,color = 'red', linetype = 'dashed')
print(p_10)
#Calculate posterior probability
graphics.off()
#Uniform prior by default
posterior = function(n, p, alpha = 1, beta = 1, k = 0.2){
return(p^(k + alpha - 1)*(1-p)^(n - k + beta - 1))
}
posterior_max = function(n, k = 0.2, alpha = 1, beta = 1){
return((k+alpha-1)/(alpha+beta+n-2))
}
integration = function(n, tol){
post = posterior(n, p)
int = cumsum(post)
dif = diff(int)
lim = length(dif[dif > tol])
return(sum(post[0:lim]))
}
n = 100
p = seq(0,0.06, 0.0001)
tol = 1e-6
norm = integration(n, tol)
post_100 = posterior(n, p)/norm
post_max_100 = posterior_max(n)
#Plot
library(ggplot2)
df = data.frame('p' = p, 'posterior' = post_100)
p_100 = ggplot(data = df, aes(x = p, y = posterior))+
geom_line()+
geom_vline(xintercept = post_max_100,color = 'red', linetype = 'dashed')
n = 10
p = seq(0,0.45, 0.0001)
norm = integration(n, tol)
post_10 = posterior(n, p)/norm
post_max_10 = posterior_max(n)
#plot
df = data.frame('p' = p, 'posterior' = post_10)
p_10 = ggplot(data = df, aes(x = p, y = posterior))+
geom_line()+
geom_vline(xintercept = post_max_10,color = 'red', linetype = 'dashed')
print(p_10)
#Calculate posterior probability
graphics.off()
#Uniform prior by default
posterior = function(n, p, alpha = 1, beta = 1, k = 0.2){
return(p^(k + alpha - 1)*(1-p)^(n - k + beta - 1))
}
posterior_max = function(n, k = 0.2, alpha = 1, beta = 1){
return((k+alpha-1)/(alpha+beta+n-2))
}
integration = function(n, tol){
post = posterior(n, p)
int = cumsum(post)
dif = diff(int)
lim = length(dif[dif > tol])
return(sum(post[0:lim]))
}
n = 100
p = seq(0,0.06, 0.0001)
tol = 1e-6
norm = integration(n, tol)
post_100 = posterior(n, p)/norm
post_max_100 = posterior_max(n)
#Plot
library(ggplot2)
df = data.frame('p' = p, 'posterior' = post_100)
p_100 = ggplot(data = df, aes(x = p, y = posterior))+
geom_line()+
geom_vline(xintercept = post_max_100,color = 'red', linetype = 'dashed')
print(p_100)
n = 10
p = seq(0,0.45, 0.0001)
norm = integration(n, tol)
post_10 = posterior(n, p)/norm
post_max_10 = posterior_max(n)
#plot
df = data.frame('p' = p, 'posterior' = post_10)
p_10 = ggplot(data = df, aes(x = p, y = posterior))+
geom_line()+
geom_vline(xintercept = post_max_10,color = 'red', linetype = 'dashed')
print(p_10)
#Calculate posterior probability
#Uniform prior by default
posterior = function(n, p, alpha = 1, beta = 1, k = 0.2){
return(p^(k + alpha - 1)*(1-p)^(n - k + beta - 1))
}
posterior_max = function(n, k = 0.2, alpha = 1, beta = 1){
return((k+alpha-1)/(alpha+beta+n-2))
}
integration = function(n, tol){
post = posterior(n, p)
int = cumsum(post)
dif = diff(int)
lim = length(dif[dif > tol])
return(sum(post[0:lim]))
}
p = seq(0, 1, 0.001)
n = 100
tol = 1e-6
norm = integration(n, tol)
post_100 = posterior(n, p = seq(0,0.04, 0.0001))/norm
post_max_100 = posterior_max(n)
n = 10
norm = integration(n, tol)
post_10 = posterior(n, p = seq(0,0.1, 0.0001))/norm
post_max_10 = posterior_max(n)
#Plot
library(ggplot2)
p = seq(0,0.06, 0.0001)
df = data.frame('p' = p, 'posterior' = post_100)
ggplot(data = df, aes(x = p, y = posterior))+
geom_line()+
geom_vline(xintercept = post_max_100,color = 'red', linetype = 'dashed')
#Calculate posterior probability
#Uniform prior by default
posterior = function(n, p, alpha = 1, beta = 1, k = 0.2){
return(p^(k + alpha - 1)*(1-p)^(n - k + beta - 1))
}
posterior_max = function(n, k = 0.2, alpha = 1, beta = 1){
return((k+alpha-1)/(alpha+beta+n-2))
}
integration = function(n, tol){
post = posterior(n, p)
int = cumsum(post)
dif = diff(int)
lim = length(dif[dif > tol])
return(sum(post[0:lim]))
}
p = seq(0, 1, 0.001)
n = 100
tol = 1e-6
norm = integration(n, tol)
post_100 = posterior(n, p = seq(0,0.1, 0.0001))/norm
post_max_100 = posterior_max(n)
n = 10
norm = integration(n, tol)
post_10 = posterior(n, p = seq(0,0.1, 0.0001))/norm
post_max_10 = posterior_max(n)
#Plot
library(ggplot2)
df = data.frame('p' = rep(p, 2),
'posterior' = c(post_100,post_10),
'n' = c(rep(100, length(p)), rep(10, length(p))))
ggplot(data = df, aes(x = p, y = posterior))+
geom_line(aes(color = factor(n)))+
geom_vline(xintercept = c(post_max_100, post_max_10),
color = c('red', 'green'), linetype = c('dashed', 'dashed'))
#Calculate posterior probability
#Uniform prior by default
posterior = function(n, p, alpha = 1, beta = 1, k = 0.2){
return(p^(k + alpha - 1)*(1-p)^(n - k + beta - 1))
}
posterior_max = function(n, k = 0.2, alpha = 1, beta = 1){
return((k+alpha-1)/(alpha+beta+n-2))
}
integration = function(n, tol){
post = posterior(n, p)
int = cumsum(post)
dif = diff(int)
lim = length(dif[dif > tol])
return(sum(post[0:lim]))
}
p = seq(0, 0.1, 0.001)
n = 100
tol = 1e-6
norm = integration(n, tol)
post_100 = posterior(n, p)/norm
post_max_100 = posterior_max(n)
n = 10
norm = integration(n, tol)
post_10 = posterior(n, p)/norm
post_max_10 = posterior_max(n)
#Plot
library(ggplot2)
df = data.frame('p' = rep(p, 2),
'posterior' = c(post_100,post_10),
'n' = c(rep(100, length(p)), rep(10, length(p))))
ggplot(data = df, aes(x = p, y = posterior))+
geom_line(aes(color = factor(n)))+
geom_vline(xintercept = c(post_max_100, post_max_10),
color = c('red', 'green'), linetype = c('dashed', 'dashed'))
#Calculate posterior probability
#Uniform prior by default
posterior = function(n, p, alpha = 1, beta = 1, k = 0.2){
return(p^(k + alpha - 1)*(1-p)^(n - k + beta - 1))
}
posterior_max = function(n, k = 0.2, alpha = 1, beta = 1){
return((k+alpha-1)/(alpha+beta+n-2))
}
integration = function(n, tol){
post = posterior(n, p)
int = cumsum(post)
dif = diff(int)
lim = length(dif[dif > tol])
return(sum(post[0:lim]))
}
p = seq(0, 0.1, 0.0001)
n = 100
tol = 1e-6
norm = integration(n, tol)
post_100 = posterior(n, p)/norm
post_max_100 = posterior_max(n)
n = 10
norm = integration(n, tol)
post_10 = posterior(n, p)/norm
post_max_10 = posterior_max(n)
#Plot
library(ggplot2)
df = data.frame('p' = rep(p, 2),
'posterior' = c(post_100,post_10),
'n' = c(rep(100, length(p)), rep(10, length(p))))
ggplot(data = df, aes(x = p, y = posterior))+
geom_line(aes(color = factor(n)))+
geom_vline(xintercept = c(post_max_100, post_max_10),
color = c('red', 'green'), linetype = c('dashed', 'dashed'))
eqi <- quantile(x, probs=c( a/2, 1-(a/2) ) )
#Confidence interval
a <- 1-0.95
eqi <- quantile(x, probs=c( a/2, 1-(a/2) ) )
equi
eqi
eqi <- quantile(post_100, probs=c( a/2, 1-(a/2) ) )
eqi
post_max_100
plot(p, post_100)
abline(v=eqi, lty=2)
plot(p, post_10)
abline(v=eqi, lty=2)
a <- 1-0.95
eqi <- quantile(post_10, probs=c( a/2, 1-(a/2) ) )
plot(p, post_10)
abline(v=eqi, lty=2)
n = 10
norm = integration(n, tol)
post_10 = posterior(n, p)/norm
post_max_10 = posterior_max(n)
a <- 1-0.95
eqi <- quantile(post_10, probs=c( a/2, 1-(a/2) ) )
plot(p, post_10)
abline(v=eqi, lty=2)
eqi
#Confidence interval
a <- 1-0.95
eqi <- quantile(post_100, probs=c( a/2, 1-(a/2) ) )
plot(p, post_100)
abline(v=eqi, lty=2)
n = 10
norm = integration(n, tol)
post_10 = posterior(n, p)/norm
post_max_10 = posterior_max(n)
eqi <- quantile(post_10, probs=c( a/2, 1-(a/2) ) )
plot(p, post_10)
abline(v=eqi, lty=2)
p = seq(0, 0.5, 0.0001)
norm = integration(n, tol)
post_10 = posterior(n, p)/norm
post_max_10 = posterior_max(n)
eqi <- quantile(post_10, probs=c( a/2, 1-(a/2) ) )
plot(p, post_10)
abline(v=eqi, lty=2)
equi
eqi
?quantile3
?quantile
## confidence intervals
theta <- seq(0, 10, 0.05)
x <- rnorm(n=1e5, mean=2, sd=1)
a <- 1-0.90
# equal-tailed interval
eqi <- quantile(x, probs=c( a/2, 1-(a/2) ) )
hist(x, xlab=expression(theta), ylab="Posterior density")
abline(v=eqi, lty=2)
eqi
x
plot(x)
p = seq(0, 0.1, 0.0001)
n = 100
tol = 1e-6
norm = integration(n, tol)
post_100 = posterior(n, p)/norm
post_max_100 = posterior_max(n)
#Confidence interval
a <- 1-0.95
eqi <- quantile(post_100, probs=c( a/2, 1-(a/2) ) )
plot(p, post_100)
abline(v=eqi, lty=2)
data_full = read.csv(file = '../data/database.csv')
ind  = which(data_full$OriginalID == 'K_Adamberg_Lactococcus_lactis_growth')
name = data_full$OriginalID[ind]
std_mu_max = data_full$SpecificTraitValue[ind]
temp = data_full$AmbientTemp[ind]
minimal_data_example = data.frame('id' = name, 'temp' = temp, 'std_mu_max' = std_mu_max)
write.csv(minimal_data_example, file = '../data/minimal_example_data.csv')
setwd("~/Desktop/master_thesis/code")
data_full = read.csv(file = '../data/database.csv')
ind  = which(data_full$OriginalID == 'K_Adamberg_Lactococcus_lactis_growth')
name = data_full$OriginalID[ind]
std_mu_max = data_full$SpecificTraitValue[ind]
temp = data_full$AmbientTemp[ind]
minimal_data_example = data.frame('id' = name, 'temp' = temp, 'std_mu_max' = std_mu_max)
write.csv(minimal_data_example, file = '../data/minimal_example_data.csv')
data_full = read.csv(file = '../data/database.csv')
ind  = which(data_full$OriginalID == 'K_Adamberg_Lactococcus_lactis_growth')
ind
std_mu_max = data_full$SpecificTraitValue[ind]
temp = data_full$AmbientTemp[ind]
minimal_data_example = data.frame('id' = name, 'temp' = temp, 'std_mu_max' = std_mu_max)
name
std_mu_max
data_full = read.csv(file = '../data/database.csv')
ind  = which(data_full$OriginalID == 'K_Adamberg_Lactococcus_lactis_growth')
name = data_full$OriginalID[ind]
std_mu_max = data_full$StandardisedTraitValue[ind]
temp = data_full$AmbientTemp[ind]
minimal_data_example = data.frame('id' = name, 'temp' = temp, 'std_mu_max' = std_mu_max)
write.csv(minimal_data_example, file = '../data/minimal_example_data.csv')
data_full = read.csv(file = '../data/database.csv')
ind  = which(data_full$OriginalID == 'K_Adamberg_Lactococcus_lactis_growth')
name = data_full$OriginalID[ind]
std_mu_max = data_full$OriginalTraitValue[ind]
temp = data_full$AmbientTemp[ind]
minimal_data_example = data.frame('id' = name, 'temp' = temp, 'std_mu_max' = std_mu_max)
write.csv(minimal_data_example, file = '../data/minimal_example_data.csv')
